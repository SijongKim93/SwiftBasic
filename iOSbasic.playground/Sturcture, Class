> Structure

값 타입이며 , 구조체 변수를 새로운 변수에 할당할 때 마다 새로운 구조체가 할당되는 특징을 가지고 있다.
즉, 같은 구조체를 여러개의 변수에 할당한 뒤 값을 변경시키더라도 다른 변수에 영향을 주지 않는다.

> Class

참조 타입이며, ARC로 메모리를 관리한다.
같은 클래스 인스턴스를 여러 개의 변수에 할당한 뒤 값을 변경시키면, 할당한 모든 변수에 영향을 준다.
상속이 가능하며, 타입 캐스팅을 통해 클래스의 인스턴스 타입을 확인할 수 있다.
deinit 을 사용하여 클래스 인스턴스의 메모리 할당을 해제 할 수 있다.

> Structure 와 Class 의 공통점

* 값을 저장할 프로퍼티를 선언할 수 있습니다.
* 함수적 기능을 하는 메서드를 선언할 수 있습니다.
* 내부 값에 . 을 사용하여 접근할 수 있습니다.
* 생성자를 사용해 초기 상태를 설정할 수 있습니다.
* extension을 사용하여 기능을 확장할 수 있습니다.
* Protocol을 채택하여 기능을 설정할 수 있습니다.


> Structure 란
CLASS와 다르게 상속이 불가능합니다.
(인스턴스/타입) 메서드, (인스턴스/타입) 프로퍼티 (클래스와 같음)
값타입(value 라고 부름)
 Swift의 대부분의 큰 뼈대는 모두 STRUCT(구조체)로 구성이 되어있습니다.
 Int, Double, String 등 데이터 타입 

> Structure 사용하는 경우
연관된 몇몇의 값들을 모아서 하나의 데이터 타입으로 표현하고 싶을 때,
다른 객체 또는 함수 등으로 전달될 때 참조가 아닌 복사를 원할 때,
자신을 상속할 필요가 없거나 자신이 다른 타입을 상속받을 필요가 없을 때,
Apple 프레임워크에서 프로그래밍을 할 때에는 주로 클래스를 많이 사용한다.

struct 구조체 이름 {
   프로퍼티와 메서드
}

struct Sport {
    var name: String
}
Sport이름을 문자열로 저장하는 구조체를 만들었습니다. 구조체 내부의 변수를 프로퍼티라고 하므로 속성이 하나인 구조체입니다. 이제 인스턴스를 만들고 사용할 수 있습니다.

---

Struture 문법

struct Person {
    var name: String
    var age: Int
    
    func speak() {
        print("Hello")
    }
    
}

let p = Person(name: "Steve", age: 50)

let name = "Paul"

---

 Class 문법

class Person {
    var name: String = "Steve"
    var age: Int = 50

}

let p = Person()
p.name


let str = "123"
let num = Int(str)


class Position {
    var x: Double
    var y: Double
    
    init() {
        x = 0.0
        y = 0.0
    }
    
    init(value: Double) {
        x = value
        y = value
    }
}

let a = Position()
a.x
a.y

let b = Position(value: 100)
b.x
b.y

Position.init()
